<?php
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class TThreadDumpType {
  const TARGET = 0;
  const PENDING = 1;
  static public $__names = array(
    0 => 'TARGET',
    1 => 'PENDING',
  );
}

final class TThreadState {
  const NEW = 0;
  const RUNNABLE = 1;
  const BLOCKED = 2;
  const WAITING = 3;
  const TIMED_WAITING = 4;
  const TERMINATED = 5;
  static public $__names = array(
    0 => 'NEW',
    1 => 'RUNNABLE',
    2 => 'BLOCKED',
    3 => 'WAITING',
    4 => 'TIMED_WAITING',
    5 => 'TERMINATED',
  );
}

final class TRouteResult {
  const OK = 0;
  const BAD_REQUEST = 200;
  const EMPTY_REQUEST = 201;
  const NOT_SUPPORTED_REQUEST = 202;
  const BAD_RESPONSE = 210;
  const EMPTY_RESPONSE = 211;
  const NOT_SUPPORTED_RESPONSE = 212;
  const TIMEOUT = 220;
  const NOT_FOUND = 230;
  const NOT_ACCEPTABLE = 240;
  const NOT_SUPPORTED_SERVICE = 241;
  const UNKNOWN = -1;
  static public $__names = array(
    0 => 'OK',
    200 => 'BAD_REQUEST',
    201 => 'EMPTY_REQUEST',
    202 => 'NOT_SUPPORTED_REQUEST',
    210 => 'BAD_RESPONSE',
    211 => 'EMPTY_RESPONSE',
    212 => 'NOT_SUPPORTED_RESPONSE',
    220 => 'TIMEOUT',
    230 => 'NOT_FOUND',
    240 => 'NOT_ACCEPTABLE',
    241 => 'NOT_SUPPORTED_SERVICE',
    -1 => 'UNKNOWN',
  );
}

class TCommandThreadDump {
  static $_TSPEC;

  /**
   * @var int
   */
  public $type =   0;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $pendingTimeMillis = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'pendingTimeMillis',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['pendingTimeMillis'])) {
        $this->pendingTimeMillis = $vals['pendingTimeMillis'];
      }
    }
  }

  public function getName() {
    return 'TCommandThreadDump';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->pendingTimeMillis);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCommandThreadDump');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 1);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pendingTimeMillis !== null) {
      $xfer += $output->writeFieldBegin('pendingTimeMillis', TType::I64, 3);
      $xfer += $output->writeI64($this->pendingTimeMillis);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TMonitorInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $stackDepth = null;
  /**
   * @var string
   */
  public $stackFrame = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'stackDepth',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'stackFrame',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['stackDepth'])) {
        $this->stackDepth = $vals['stackDepth'];
      }
      if (isset($vals['stackFrame'])) {
        $this->stackFrame = $vals['stackFrame'];
      }
    }
  }

  public function getName() {
    return 'TMonitorInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stackDepth);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stackFrame);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TMonitorInfo');
    if ($this->stackDepth !== null) {
      $xfer += $output->writeFieldBegin('stackDepth', TType::I32, 1);
      $xfer += $output->writeI32($this->stackDepth);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stackFrame !== null) {
      $xfer += $output->writeFieldBegin('stackFrame', TType::STRING, 2);
      $xfer += $output->writeString($this->stackFrame);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TThreadDump {
  static $_TSPEC;

  /**
   * @var string
   */
  public $threadName = null;
  /**
   * @var int
   */
  public $threadId = null;
  /**
   * @var int
   */
  public $blockedTime = null;
  /**
   * @var int
   */
  public $blockedCount = null;
  /**
   * @var int
   */
  public $waitedTime = null;
  /**
   * @var int
   */
  public $waitedCount = null;
  /**
   * @var string
   */
  public $lockName = null;
  /**
   * @var int
   */
  public $lockOwnerId = null;
  /**
   * @var string
   */
  public $lockOwnerName = null;
  /**
   * @var bool
   */
  public $inNative = null;
  /**
   * @var bool
   */
  public $suspended = null;
  /**
   * @var int
   */
  public $threadState = null;
  /**
   * @var string[]
   */
  public $stackTrace = null;
  /**
   * @var \TMonitorInfo[]
   */
  public $lockedMonitors = null;
  /**
   * @var string[]
   */
  public $lockedSynchronizers = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'threadId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'blockedTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'blockedCount',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'waitedTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'waitedCount',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'lockName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'lockOwnerId',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'lockOwnerName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'inNative',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'suspended',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'threadState',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'stackTrace',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        14 => array(
          'var' => 'lockedMonitors',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TMonitorInfo',
            ),
          ),
        15 => array(
          'var' => 'lockedSynchronizers',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadName'])) {
        $this->threadName = $vals['threadName'];
      }
      if (isset($vals['threadId'])) {
        $this->threadId = $vals['threadId'];
      }
      if (isset($vals['blockedTime'])) {
        $this->blockedTime = $vals['blockedTime'];
      }
      if (isset($vals['blockedCount'])) {
        $this->blockedCount = $vals['blockedCount'];
      }
      if (isset($vals['waitedTime'])) {
        $this->waitedTime = $vals['waitedTime'];
      }
      if (isset($vals['waitedCount'])) {
        $this->waitedCount = $vals['waitedCount'];
      }
      if (isset($vals['lockName'])) {
        $this->lockName = $vals['lockName'];
      }
      if (isset($vals['lockOwnerId'])) {
        $this->lockOwnerId = $vals['lockOwnerId'];
      }
      if (isset($vals['lockOwnerName'])) {
        $this->lockOwnerName = $vals['lockOwnerName'];
      }
      if (isset($vals['inNative'])) {
        $this->inNative = $vals['inNative'];
      }
      if (isset($vals['suspended'])) {
        $this->suspended = $vals['suspended'];
      }
      if (isset($vals['threadState'])) {
        $this->threadState = $vals['threadState'];
      }
      if (isset($vals['stackTrace'])) {
        $this->stackTrace = $vals['stackTrace'];
      }
      if (isset($vals['lockedMonitors'])) {
        $this->lockedMonitors = $vals['lockedMonitors'];
      }
      if (isset($vals['lockedSynchronizers'])) {
        $this->lockedSynchronizers = $vals['lockedSynchronizers'];
      }
    }
  }

  public function getName() {
    return 'TThreadDump';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->threadName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->threadId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->blockedCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->waitedTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->waitedCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lockName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lockOwnerId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lockOwnerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->inNative);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->suspended);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->threadState);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::LST) {
            $this->stackTrace = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->stackTrace []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::LST) {
            $this->lockedMonitors = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \TMonitorInfo();
              $xfer += $elem11->read($input);
              $this->lockedMonitors []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::LST) {
            $this->lockedSynchronizers = array();
            $_size12 = 0;
            $_etype15 = 0;
            $xfer += $input->readListBegin($_etype15, $_size12);
            for ($_i16 = 0; $_i16 < $_size12; ++$_i16)
            {
              $elem17 = null;
              $xfer += $input->readString($elem17);
              $this->lockedSynchronizers []= $elem17;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TThreadDump');
    if ($this->threadName !== null) {
      $xfer += $output->writeFieldBegin('threadName', TType::STRING, 1);
      $xfer += $output->writeString($this->threadName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadId !== null) {
      $xfer += $output->writeFieldBegin('threadId', TType::I64, 2);
      $xfer += $output->writeI64($this->threadId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockedTime !== null) {
      $xfer += $output->writeFieldBegin('blockedTime', TType::I64, 3);
      $xfer += $output->writeI64($this->blockedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blockedCount !== null) {
      $xfer += $output->writeFieldBegin('blockedCount', TType::I64, 4);
      $xfer += $output->writeI64($this->blockedCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->waitedTime !== null) {
      $xfer += $output->writeFieldBegin('waitedTime', TType::I64, 5);
      $xfer += $output->writeI64($this->waitedTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->waitedCount !== null) {
      $xfer += $output->writeFieldBegin('waitedCount', TType::I64, 6);
      $xfer += $output->writeI64($this->waitedCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockName !== null) {
      $xfer += $output->writeFieldBegin('lockName', TType::STRING, 7);
      $xfer += $output->writeString($this->lockName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockOwnerId !== null) {
      $xfer += $output->writeFieldBegin('lockOwnerId', TType::I64, 8);
      $xfer += $output->writeI64($this->lockOwnerId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockOwnerName !== null) {
      $xfer += $output->writeFieldBegin('lockOwnerName', TType::STRING, 9);
      $xfer += $output->writeString($this->lockOwnerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inNative !== null) {
      $xfer += $output->writeFieldBegin('inNative', TType::BOOL, 10);
      $xfer += $output->writeBool($this->inNative);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->suspended !== null) {
      $xfer += $output->writeFieldBegin('suspended', TType::BOOL, 11);
      $xfer += $output->writeBool($this->suspended);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadState !== null) {
      $xfer += $output->writeFieldBegin('threadState', TType::I32, 12);
      $xfer += $output->writeI32($this->threadState);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stackTrace !== null) {
      if (!is_array($this->stackTrace)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('stackTrace', TType::LST, 13);
      {
        $output->writeListBegin(TType::STRING, count($this->stackTrace));
        {
          foreach ($this->stackTrace as $iter18)
          {
            $xfer += $output->writeString($iter18);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockedMonitors !== null) {
      if (!is_array($this->lockedMonitors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lockedMonitors', TType::LST, 14);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lockedMonitors));
        {
          foreach ($this->lockedMonitors as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lockedSynchronizers !== null) {
      if (!is_array($this->lockedSynchronizers)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lockedSynchronizers', TType::LST, 15);
      {
        $output->writeListBegin(TType::STRING, count($this->lockedSynchronizers));
        {
          foreach ($this->lockedSynchronizers as $iter20)
          {
            $xfer += $output->writeString($iter20);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCommandThreadDumpResponse {
  static $_TSPEC;

  /**
   * @var \TThreadDump[]
   */
  public $threadDumps = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadDumps',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TThreadDump',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadDumps'])) {
        $this->threadDumps = $vals['threadDumps'];
      }
    }
  }

  public function getName() {
    return 'TCommandThreadDumpResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->threadDumps = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \TThreadDump();
              $xfer += $elem26->read($input);
              $this->threadDumps []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCommandThreadDumpResponse');
    if ($this->threadDumps !== null) {
      if (!is_array($this->threadDumps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('threadDumps', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->threadDumps));
        {
          foreach ($this->threadDumps as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCmdActiveThreadCount {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'TCmdActiveThreadCount';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCmdActiveThreadCount');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCmdActiveThreadCountRes {
  static $_TSPEC;

  /**
   * @var int
   */
  public $histogramSchemaType = null;
  /**
   * @var int[]
   */
  public $activeThreadCount = null;
  /**
   * @var int
   */
  public $timeStamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'histogramSchemaType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'activeThreadCount',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        3 => array(
          'var' => 'timeStamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['histogramSchemaType'])) {
        $this->histogramSchemaType = $vals['histogramSchemaType'];
      }
      if (isset($vals['activeThreadCount'])) {
        $this->activeThreadCount = $vals['activeThreadCount'];
      }
      if (isset($vals['timeStamp'])) {
        $this->timeStamp = $vals['timeStamp'];
      }
    }
  }

  public function getName() {
    return 'TCmdActiveThreadCountRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->histogramSchemaType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->activeThreadCount = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readI32($elem33);
              $this->activeThreadCount []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeStamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCmdActiveThreadCountRes');
    if ($this->histogramSchemaType !== null) {
      $xfer += $output->writeFieldBegin('histogramSchemaType', TType::I32, 1);
      $xfer += $output->writeI32($this->histogramSchemaType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activeThreadCount !== null) {
      if (!is_array($this->activeThreadCount)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('activeThreadCount', TType::LST, 2);
      {
        $output->writeListBegin(TType::I32, count($this->activeThreadCount));
        {
          foreach ($this->activeThreadCount as $iter34)
          {
            $xfer += $output->writeI32($iter34);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeStamp !== null) {
      $xfer += $output->writeFieldBegin('timeStamp', TType::I64, 3);
      $xfer += $output->writeI64($this->timeStamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TActiveThreadDump {
  static $_TSPEC;

  /**
   * @var int
   */
  public $execTime = null;
  /**
   * @var \TThreadDump
   */
  public $threadDump = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'execTime',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'threadDump',
          'type' => TType::STRUCT,
          'class' => '\TThreadDump',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['execTime'])) {
        $this->execTime = $vals['execTime'];
      }
      if (isset($vals['threadDump'])) {
        $this->threadDump = $vals['threadDump'];
      }
    }
  }

  public function getName() {
    return 'TActiveThreadDump';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->threadDump = new \TThreadDump();
            $xfer += $this->threadDump->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TActiveThreadDump');
    if ($this->execTime !== null) {
      $xfer += $output->writeFieldBegin('execTime', TType::I64, 1);
      $xfer += $output->writeI64($this->execTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->threadDump !== null) {
      if (!is_object($this->threadDump)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('threadDump', TType::STRUCT, 2);
      $xfer += $this->threadDump->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCmdActiveThreadDump {
  static $_TSPEC;

  /**
   * @var int
   */
  public $execTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'execTime',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['execTime'])) {
        $this->execTime = $vals['execTime'];
      }
    }
  }

  public function getName() {
    return 'TCmdActiveThreadDump';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCmdActiveThreadDump');
    if ($this->execTime !== null) {
      $xfer += $output->writeFieldBegin('execTime', TType::I64, 1);
      $xfer += $output->writeI64($this->execTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCmdActiveThreadDumpRes {
  static $_TSPEC;

  /**
   * @var \TActiveThreadDump[]
   */
  public $threadDumps = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'threadDumps',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TActiveThreadDump',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['threadDumps'])) {
        $this->threadDumps = $vals['threadDumps'];
      }
    }
  }

  public function getName() {
    return 'TCmdActiveThreadDumpRes';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->threadDumps = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \TActiveThreadDump();
              $xfer += $elem40->read($input);
              $this->threadDumps []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCmdActiveThreadDumpRes');
    if ($this->threadDumps !== null) {
      if (!is_array($this->threadDumps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('threadDumps', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->threadDumps));
        {
          foreach ($this->threadDumps as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCommandEcho {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TCommandEcho';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCommandEcho');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCommandTransfer {
  static $_TSPEC;

  /**
   * @var string
   */
  public $applicationName = null;
  /**
   * @var string
   */
  public $agentId = null;
  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var string
   */
  public $payload = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'applicationName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'agentId',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'startTime',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'payload',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['applicationName'])) {
        $this->applicationName = $vals['applicationName'];
      }
      if (isset($vals['agentId'])) {
        $this->agentId = $vals['agentId'];
      }
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
    }
  }

  public function getName() {
    return 'TCommandTransfer';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->applicationName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->agentId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payload);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCommandTransfer');
    if ($this->applicationName !== null) {
      $xfer += $output->writeFieldBegin('applicationName', TType::STRING, 1);
      $xfer += $output->writeString($this->applicationName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agentId !== null) {
      $xfer += $output->writeFieldBegin('agentId', TType::STRING, 2);
      $xfer += $output->writeString($this->agentId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I64, 3);
      $xfer += $output->writeI64($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      $xfer += $output->writeFieldBegin('payload', TType::STRING, 4);
      $xfer += $output->writeString($this->payload);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TCommandTransferResponse {
  static $_TSPEC;

  /**
   * @var int
   */
  public $routeResult = null;
  /**
   * @var string
   */
  public $payload = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'routeResult',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'payload',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['routeResult'])) {
        $this->routeResult = $vals['routeResult'];
      }
      if (isset($vals['payload'])) {
        $this->payload = $vals['payload'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'TCommandTransferResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->routeResult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->payload);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TCommandTransferResponse');
    if ($this->routeResult !== null) {
      $xfer += $output->writeFieldBegin('routeResult', TType::I32, 1);
      $xfer += $output->writeI32($this->routeResult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->payload !== null) {
      $xfer += $output->writeFieldBegin('payload', TType::STRING, 2);
      $xfer += $output->writeString($this->payload);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


